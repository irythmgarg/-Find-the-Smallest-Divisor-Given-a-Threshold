class Solution {
public:
    // Function to check if the sum of elements with given divisor 'mid' is within threshold
    bool func(vector<int> ans, int thresh, int mid) {
        int sum = 0;
        for (int i = 0; i < ans.size(); i++) {
            // Calculate the ceiling value for each element division
            sum += (ans[i] + mid - 1) / mid;
        }
        // Return true if the sum is less than or equal to threshold
        return sum <= thresh;
    }

    int smallestDivisor(vector<int>& nums, int threshold) {
        // If the threshold is smaller than the number of elements, it's impossible
        if (threshold < nums.size())
            return -1;

        // Initialize binary search boundaries
        int s = 1; // Smallest possible divisor is 1
        int e = *max_element(nums.begin(), nums.end()); // Largest possible divisor is max of nums
        int mid = 1; // Midpoint of current search space

        // Perform binary search
        while (s <= e) {
            mid = (s + e) / 2; // Calculate mid-point
            int sqr = func(nums, threshold, mid); // Check if current mid works as a divisor

            if (sqr == 0) // If sum exceeds threshold, increase divisor
                s = mid + 1;
            else // If sum is within threshold, try smaller divisors
                e = mid - 1;
        }
        // Return the smallest valid divisor
        return s;
    }
};
